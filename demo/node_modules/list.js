const bel = require('bel')
const file = require('path').basename(__filename)
const style_sheet = require('../../src/node_modules/support-style-sheet')
const button = require('../../src/index')
// const message_maker = require('../../src/node_modules/message_maker')

module.exports = i_list

function i_list ({page = 'Demo', flow = 'ui-list', name, body = [], expanded = false, hidden = true, theme }, protocol) {
    // const make = message_maker(`${name}/${flow}/i_list`)
    // const message = make({to: page, type: 'ready', data: body})
    const recipients = []

    function widget () {
        const send = protocol( get )
        const fn_name = `${widget.name}/${i_list.name}`
        // send(message)
        send({page, from: name, flow, type: 'ready', file, fn: i_list.name, line: 19})
        const list = document.createElement('i-list')
        const shadow = list.attachShadow({mode: 'closed'})
        list.setAttribute('role', 'listbox')
        list.ariaHidden = hidden
        list.ariaLabel = name
        list.tabIndex = 0
        list.ariaExpanded = expanded
        style_sheet(shadow, style)
        try {
            body.map( (option, i) => {
                const {text, icon, selected} = option
                let item = button({page, name: text, body: text, selected, icon, role: 'option', 
                                    theme: { 
                                        props: {
                                            color_hover: 'var(--color)', 
                                            bg_color: 'transparent', 
                                            bg_color_hover: 'transparent'}
                                        }
                                    }, button_protocol(text))
                const li = bel`<li role="option" data-option=${text}" aria-selected=${selected}>${item}</li>`
                const option_list = text.toLowerCase().split(' ').join('-')
                shadow.append(li)
                send({from: `option-${option_list}`, flow, type: 'ready', fn: fn_name, file, line: 34})
            })
            if (body.length === 0) send({from: name, flow, type: 'error', body: 'body no items', fn: fn_name, file, line: 42})
        } catch(e) {
            send({from: name, flow, type: 'error', body: 'something went wrong', fn: fn_name, file, line: 44})
        }
        
        return list

        function handle_expanded_event (body) {
            list.ariaHidden = body
        }
        function handle_select_event (from, body) {
            const selected = !body
            const type = selected ? 'selected' : 'unselected'
            const { childNodes } = shadow
            childNodes.forEach( child => child.dataset.option === from ? child.setAttribute('aria-selected', selected) : false)
            recipients[from]({from, type, body: selected})
            send({page, from, flow, type, body: selected, fn: handle_select_event.name, file, line: 58})
        }
        function button_protocol (name) {
            return (send) => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {from, type, body} = msg
            // console.log( msg )
            if (type === 'click') return handle_select_event(from, body)
            if (type === 'expanded') return handle_expanded_event(body)
            send(msg)
        }
    }

    // insert CSS style
    const custom_style = theme ? theme.style : ''
    // set CSS variables
    if (theme && theme.props) {
    var {size, size_hover, current_size,
        weight, weight_hover, current_weight,
        color, color_hover, current_color, current_bg_color, 
        bg_color, bg_color_hover, border_color_hover,
        border_width, border_style, border_opacity, border_color, border_radius, 
        padding, width, height, opacity,
        fill, fill_hover, icon_size, current_fill,
        shadow_color, offset_x, offset_y, blur, shadow_opacity,
        shadow_color_hover, offset_x_hover, offset_y_hover, blur_hover, shadow_opacity_hover
    } = theme.props
    }

    const style = `
    :host(i-list) {
        --color: ${color ? color : 'var(--primary-color)'};
        --bg-color: ${bg_color ? bg_color : 'var(--color-white)'};
        display: grid;
    }
    :host(i-list) li {
        display: grid;
        border: 1px solid hsl(var(--primary-color));
        margin-top: -1px;
        color: hsl(var(--color));
        background-color: hsl(var(--bg-color));
        transition: color 0.3s, background-color 0.3s ease-in-out;
        cursor: pointer;
    }
    :host(i-list) li:hover {
        --bg-color: ${bg_color_hover ? bg_color_hover : 'var(--color-greyEB)'};
    }
    :host(i-list[aria-hidden="true"]) {
        opacity: 0;
        animation: close 0.3s;
        pointer-events: none;
    }
    :host(i-list[aria-hidden="false"]) {
        animation: open 0.3s;
    }
    @keyframes close {
        0% {
            opacity: 1;
        }
        100% {
            opacity: 0;
        }
    }
    @keyframes open {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
    ${custom_style}
    `

    return widget()
}